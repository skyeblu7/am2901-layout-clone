%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6350 600 pap
%%Page: cds 1
gis
0 803 4600 5546 clwin
0 803 4600 5546 clwin
0 803 4600 5546 clwin
1 fds
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 fde
1 sfp
0 800 400 slc
0 800 400 sfc
ssls
0 3198 4600 4923 dbf
1725 4600 0 3198 dbu
0 4396 4600 5546 dbf
1150 4600 0 4396 dbu
191 4396 1341 5546 dbf
1150 1150 191 4396 dbu
2 fds
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 fde
2 sfp
0 800 400 slc
0 800 400 sfc
575 4780 958 5163 dbf
383 383 575 4780 dbu
575 1953 958 2336 dbf
383 383 575 1953 dbu
1341 1953 1725 2336 dbf
383 384 1341 1953 dbu
2108 1953 2491 2336 dbf
383 383 2108 1953 dbu
2875 1953 3258 2336 dbf
383 383 2875 1953 dbu
575 1953 4025 2240 dbf
287 3450 575 1953 dbu
3641 1953 4025 2336 dbf
383 384 3641 1953 dbu
1000 502 0 slc
1000 502 0 sfc
575 3773 4025 4348 dbf
575 3450 575 3773 dbu
1150 994 1533 1378 dbf
384 383 1150 994 dbu
0 800 400 slc
0 800 400 sfc
767 767 383 4588 dbu
862 3833 383 1713 dbu
1000 502 0 slc
1000 502 0 sfc
1054 3833 383 3534 dbu
766 767 958 803 dbu
3 fds
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 fde
3 sfp
1000 0 0 slc
1000 0 0 sfc
1054 2480 dpb
1054 3725 dpv
1245 3725 dpv
1245 2480 dpv
dpf
1054 2480 dpb
1054 3725 dpv
1245 3725 dpv
1245 2480 dpv
dpu
0 -1245 1150 3725 dls
1054 3534 1245 4588 dbf
1054 191 1054 3534 dbu
1868 4444 1964 4540 dbf
96 96 1868 4444 dbu
1820 2480 dpb
1820 3725 dpv
2012 3725 dpv
2012 2480 dpv
dpf
1820 2480 dpb
1820 3725 dpv
2012 3725 dpv
2012 2480 dpv
dpu
0 -1245 1916 3725 dls
1820 3534 2012 4588 dbf
1054 192 1820 3534 dbu
2587 2480 dpb
2587 3725 dpv
2779 3725 dpv
2779 2480 dpv
dpf
2587 2480 dpb
2587 3725 dpv
2779 3725 dpv
2779 2480 dpv
dpu
0 -1245 2683 3725 dls
2587 3534 2779 4588 dbf
1054 192 2587 3534 dbu
3402 4444 3497 4540 dbf
96 95 3402 4444 dbu
3354 2480 dpb
3354 3725 dpv
3545 3725 dpv
3545 2480 dpv
dpf
3354 2480 dpb
3354 3725 dpv
3545 3725 dpv
3545 2480 dpv
dpu
0 -1245 3450 3725 dls
3354 3534 3545 4588 dbf
1054 191 3354 3534 dbu
1054 1713 1245 2480 dbf
767 191 1054 1713 dbu
1820 1713 2012 2480 dbf
767 192 1820 1713 dbu
2587 1713 2779 2480 dbf
767 192 2587 1713 dbu
3354 1713 3545 2480 dbf
767 191 3354 1713 dbu
670 3294 1054 3678 dbf
384 384 670 3294 dbu
2395 2623 2779 3007 dbf
384 384 2395 2623 dbu
4 fds
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 fde
4 sfp
0 0 1000 slc
0 0 1000 sfc
670 3486 766 3582 dbf
96 96 670 3486 dbu
622 3965 dpb
622 5163 dpv
910 5163 dpv
910 3965 dpv
dpf
622 3965 dpb
622 5163 dpv
910 5163 dpv
910 3965 dpv
dpu
0 1198 766 3965 dls
575 3965 958 4348 dbf
383 383 575 3965 dbu
1389 946 dpb
1389 2000 dpv
1677 2000 dpv
1677 946 dpv
dpf
1389 946 dpb
1389 2000 dpv
1677 2000 dpv
1677 946 dpv
dpu
0 -1054 1533 2000 dls
1341 3965 1725 4348 dbf
383 384 1341 3965 dbu
2108 3965 2491 4348 dbf
383 383 2108 3965 dbu
2539 2767 2635 2863 dbf
96 96 2539 2767 dbu
2875 3965 3258 4348 dbf
383 383 2875 3965 dbu
3162 2863 3258 2959 dbf
96 96 3162 2863 dbu
2156 4253 dpb
2156 3390 dpv
3066 3390 dpv
3066 2048 dpv
3354 2048 dpv
3354 3678 dpv
2443 3678 dpv
2443 4253 dpv
dpf
2156 4253 dpb
2156 3390 dpv
3066 3390 dpv
3066 2048 dpv
3354 2048 dpv
3354 3678 dpv
2443 3678 dpv
2443 4253 dpv
dpu
2300 4253 dlt
0 -719 dlv
910 0 dlv
0 -1486 dlv
dle
3689 3965 dpb
3689 5211 dpv
3977 5211 dpv
3977 3965 dpv
dpf
3689 3965 dpb
3689 5211 dpv
3977 5211 dpv
3977 3965 dpv
dpu
0 1246 3833 3965 dls
3641 3965 4025 4348 dbf
383 384 3641 3965 dbu
575 4780 958 5163 dbf
383 383 575 4780 dbu
1150 994 1533 1378 dbf
384 383 1150 994 dbu
575 1953 958 2336 dbf
383 383 575 1953 dbu
1341 1953 1725 2336 dbf
383 384 1341 1953 dbu
2108 1953 2491 2336 dbf
383 383 2108 1953 dbu
2875 1953 3258 2336 dbf
383 383 2875 1953 dbu
3641 1953 4025 2336 dbf
383 384 3641 1953 dbu
479 1953 958 2432 dbf
479 479 479 1953 dbu
527 4732 1006 5211 dbf
479 479 527 4732 dbu
1102 946 1581 1425 dbf
479 479 1102 946 dbu
3402 4732 3881 5211 dbf
479 479 3402 4732 dbu
3641 1953 4120 2432 dbf
479 479 3641 1953 dbu
670 3294 1054 3678 dbf
384 384 670 3294 dbu
2395 2623 2779 3007 dbf
384 384 2395 2623 dbu
5 fds
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 fde
5 sfp
1000 0 1000 slc
1000 0 1000 sfc
95 1186 143 1234 dbf
48 48 95 1186 dbu
95 5115 191 5211 dbf
96 96 95 5115 dbu
718 1953 dpb
718 2336 dpv
3881 2336 dpv
3881 1953 dpv
dpf
718 1953 dpb
718 2336 dpv
3881 2336 dpv
3881 1953 dpv
dpu
-3163 0 3881 2144 dls
0 4588 4600 5355 dbf
767 4600 0 4588 dbu
0 803 4600 1569 dbf
766 4600 0 803 dbu
479 1953 958 2432 dbf
479 479 479 1953 dbu
527 4732 1006 5211 dbf
479 479 527 4732 dbu
1102 946 1581 1425 dbf
479 479 1102 946 dbu
3402 4732 3881 5211 dbf
479 479 3402 4732 dbu
3641 1953 4120 2432 dbf
479 479 3641 1953 dbu
502 149 149 slc
0 0 0 sfc
670 4061 862 4253 dbs
1437 4061 1629 4253 dbs
2204 4061 2395 4253 dbs
2970 4061 3162 4253 dbs
3737 4061 3929 4253 dbs
670 4875 862 5067 dbs
1245 1090 1437 1282 dbs
670 2048 862 2240 dbs
1437 2048 1629 2240 dbs
2204 2048 2395 2240 dbs
2970 2048 3162 2240 dbs
3737 2048 3929 2240 dbs
766 3390 958 3582 dbs
2491 2719 2683 2911 dbs
2 sfp
200 200 600 slc
1000 0 1000 sfc
575 2048 862 2336 dbf
288 287 575 2048 dbu
622 4828 910 5115 dbf
287 288 622 4828 dbu
1197 1042 1485 1330 dbf
288 288 1197 1042 dbu
3497 4828 3785 5115 dbf
287 288 3497 4828 dbu
3737 2048 4025 2336 dbf
288 288 3737 2048 dbu
1000 1000 1000 slc
1000 1000 1000 sfc
0 4745 0 802 dls
4602 0 -1 803 dls
0 0 1000 slc
0 0 1000 sfc
575 383 575 4732 dbu
383 575 575 4732 dls
383 -575 575 5307 dls
575 384 1341 4732 dbu
384 575 1341 4732 dls
384 -575 1341 5307 dls
575 383 2108 4732 dbu
383 575 2108 4732 dls
383 -575 2108 5307 dls
575 383 2875 4732 dbu
383 575 2875 4732 dls
383 -575 2875 5307 dls
575 384 3641 4732 dbu
384 575 3641 4732 dls
384 -575 3641 5307 dls
383 383 575 1953 dbu
383 383 575 1953 dls
383 -383 575 2336 dls
383 384 1341 1953 dbu
384 383 1341 1953 dls
384 -383 1341 2336 dls
383 383 2108 1953 dbu
383 383 2108 1953 dls
383 -383 2108 2336 dls
383 383 2875 1953 dbu
383 383 2875 1953 dls
383 -383 2875 2336 dls
383 384 3641 1953 dbu
384 383 3641 1953 dls
384 -383 3641 2336 dls
1000 0 0 slc
1000 0 0 sfc
1054 191 1054 4492 dbu
191 1054 1054 4492 dls
191 -1054 1054 5546 dls
1054 192 1820 4492 dbu
192 1054 1820 4492 dls
192 -1054 1820 5546 dls
1054 192 2587 4492 dbu
192 1054 2587 4492 dls
192 -1054 2587 5546 dls
1054 191 3354 4492 dbu
191 1054 3354 4492 dls
191 -1054 3354 5546 dls
767 191 1054 1713 dbu
191 767 1054 1713 dls
191 -767 1054 2480 dls
767 192 1820 1713 dbu
192 767 1820 1713 dls
192 -767 1820 2480 dls
767 192 2587 1713 dbu
192 767 2587 1713 dls
192 -767 2587 2480 dls
767 191 3354 1713 dbu
191 767 3354 1713 dls
191 -767 3354 2480 dls
0 803 4600 5547 clwin
gfs
%%Trailer
%%EOF
