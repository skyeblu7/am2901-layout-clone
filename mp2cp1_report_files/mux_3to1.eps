%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6350 600 pap
%%Page: cds 1
gis
rotp
662 0 5689 4588 clwin
662 0 5683 4595 clwin
662 0 5683 4595 clwin
ssls
1000 0 0 slc
1000 0 0 sfc
0 17 1923 1435 dls
87 0 1923 1443 dls
0 17 2010 1435 dls
1923 1497 dlt
5 -12 dlv
12 -9 dlv
21 -4 dlv
12 0 dlv
21 4 dlv
12 9 dlv
4 12 dlv
0 8 dlv
-4 13 dlv
-12 8 dlv
-21 4 dlv
-12 0 dlv
-21 -4 dlv
-12 -8 dlv
-5 -13 dlv
0 -8 dlv
dle
87 -58 1923 1530 dls
0 16 3490 1009 dls
87 0 3490 1017 dls
0 16 3577 1009 dls
3506 1058 dlt
-4 9 dlv
-12 12 dlv
87 0 dlv
dle
0 800 400 slc
0 800 400 sfc
0 -305 2315 2941 dls
0 -392 2489 2941 dls
-348 0 2054 2419 dls
-348 0 3098 2071 dls
348 0 1706 1723 dls
2054 2767 dpb
2054 1375 dpv
2750 1723 dpv
2750 2419 dpv
dpu
0 -305 3881 2506 dls
0 -392 4056 2506 dls
-348 0 3620 1984 dls
-348 0 4665 1636 dls
348 0 3272 1287 dls
3620 2332 dpb
3620 939 dpv
4317 1287 dpv
4317 1984 dpv
dpu
224 749 1000 slc
224 749 1000 sfc
261 0 1445 1723 dls
2698 0 1358 3202 dls
0 696 4056 2506 dls
2523 0 1358 3637 dls
0 1131 3881 2506 dls
1131 0 1358 4072 dls
0 1131 2489 2941 dls
957 0 1358 4507 dls
0 1566 2315 2941 dls
261 0 1445 2419 dls
87 0 3098 2071 dls
0 87 3185 1984 dls
1827 0 1445 1287 dls
87 0 3185 1984 dls
522 0 4665 1636 dls
1000 0 0 slc
1000 0 0 sfc
0 -87 1113 1766 dls
1113 1725 dlt
8 8 dlv
9 4 dlv
12 0 dlv
9 -4 dlv
8 -8 dlv
4 -13 dlv
0 -8 dlv
-4 -12 dlv
-8 -9 dlv
-9 -4 dlv
-12 0 dlv
-9 4 dlv
-8 9 dlv
dle
737 3204 dlt
-4 8 dlv
-13 5 dlv
-12 0 dlv
-13 -5 dlv
-4 -8 dlv
4 -8 dlv
9 -4 dlv
20 -4 dlv
9 -5 dlv
4 -8 dlv
0 -4 dlv
-4 -8 dlv
-13 -4 dlv
-12 0 dlv
-13 4 dlv
-4 8 dlv
dle
762 3192 dlt
50 0 dlv
0 8 dlv
-5 8 dlv
-4 4 dlv
-8 5 dlv
-12 0 dlv
-9 -5 dlv
-8 -8 dlv
-4 -12 dlv
0 -9 dlv
4 -12 dlv
8 -8 dlv
9 -4 dlv
12 0 dlv
8 4 dlv
9 8 dlv
dle
0 -87 841 3246 dls
882 3229 dlt
8 4 dlv
13 13 dlv
0 -87 dlv
dle
66 0 932 3150 dls
0 -58 1027 3217 dls
1027 3200 dlt
12 12 dlv
9 5 dlv
12 0 dlv
8 -5 dlv
5 -12 dlv
0 -41 dlv
dle
894 3639 dlt
-5 9 dlv
-12 4 dlv
-12 0 dlv
-13 -4 dlv
-4 -9 dlv
4 -8 dlv
8 -4 dlv
21 -4 dlv
8 -4 dlv
5 -9 dlv
0 -4 dlv
-5 -8 dlv
-12 -4 dlv
-12 0 dlv
-13 4 dlv
-4 8 dlv
dle
918 3627 dlt
50 0 dlv
0 8 dlv
-4 8 dlv
-4 5 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-8 -9 dlv
-5 -12 dlv
0 -8 dlv
5 -13 dlv
8 -8 dlv
8 -4 dlv
13 0 dlv
8 4 dlv
8 8 dlv
dle
0 -87 997 3681 dls
1039 3664 dlt
8 4 dlv
12 13 dlv
0 -87 dlv
dle
720 4074 dlt
-5 9 dlv
-12 4 dlv
-12 0 dlv
-13 -4 dlv
-4 -9 dlv
4 -8 dlv
8 -4 dlv
21 -4 dlv
8 -4 dlv
5 -9 dlv
0 -4 dlv
-5 -8 dlv
-12 -4 dlv
-12 0 dlv
-13 4 dlv
-4 8 dlv
dle
744 4062 dlt
50 0 dlv
0 8 dlv
-4 9 dlv
-4 4 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-8 -9 dlv
-5 -12 dlv
0 -8 dlv
5 -13 dlv
8 -8 dlv
8 -4 dlv
13 0 dlv
8 4 dlv
8 8 dlv
dle
0 -87 823 4116 dls
877 4116 dlt
-12 -4 dlv
-9 -13 dlv
-4 -20 dlv
0 -13 dlv
4 -21 dlv
9 -12 dlv
12 -4 dlv
8 0 dlv
13 4 dlv
8 12 dlv
4 21 dlv
0 13 dlv
-4 20 dlv
-8 13 dlv
-13 4 dlv
-8 0 dlv
dle
-58 -87 910 4116 dls
66 0 927 4021 dls
0 -58 1022 4087 dls
1022 4070 dlt
12 13 dlv
9 4 dlv
12 0 dlv
8 -4 dlv
5 -13 dlv
0 -41 dlv
dle
885 4510 dlt
-4 8 dlv
-13 4 dlv
-12 0 dlv
-13 -4 dlv
-4 -8 dlv
4 -9 dlv
9 -4 dlv
20 -4 dlv
9 -4 dlv
4 -8 dlv
0 -5 dlv
-4 -8 dlv
-13 -4 dlv
-12 0 dlv
-13 4 dlv
-4 8 dlv
dle
910 4497 dlt
49 0 dlv
0 8 dlv
-4 9 dlv
-4 4 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-8 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -13 dlv
8 -8 dlv
8 -4 dlv
13 0 dlv
8 4 dlv
8 8 dlv
dle
0 -87 988 4551 dls
1042 4551 dlt
-12 -4 dlv
-8 -13 dlv
-5 -20 dlv
0 -13 dlv
5 -20 dlv
8 -13 dlv
12 -4 dlv
9 0 dlv
12 4 dlv
8 13 dlv
4 20 dlv
0 13 dlv
-4 20 dlv
-8 13 dlv
-12 4 dlv
-9 0 dlv
dle
-58 -87 1075 4551 dls
0 -58 1159 2448 dls
1159 2435 dlt
-8 9 dlv
-9 4 dlv
-12 0 dlv
-9 -4 dlv
-8 -9 dlv
-4 -12 dlv
0 -8 dlv
4 -13 dlv
8 -8 dlv
9 -4 dlv
12 0 dlv
9 4 dlv
8 8 dlv
dle
1080 1304 dlt
-8 8 dlv
-8 5 dlv
-13 0 dlv
-8 -5 dlv
-8 -8 dlv
-4 -12 dlv
0 -9 dlv
4 -12 dlv
8 -8 dlv
8 -5 dlv
13 0 dlv
8 5 dlv
8 8 dlv
dle
0 -59 1109 1317 dls
1109 1300 dlt
13 12 dlv
8 5 dlv
13 0 dlv
8 -5 dlv
4 -12 dlv
0 -42 dlv
dle
25 -58 5413 1665 dls
5462 1665 dlt
-24 -58 dlv
-9 -17 dlv
-8 -8 dlv
-8 -4 dlv
-4 0 dlv
dle
58 25 2634 1957 dls
2634 2007 dlt
58 -25 dlv
17 -8 dlv
8 -9 dlv
4 -8 dlv
0 -4 dlv
dle
58 0 2634 2032 dls
2651 2032 dlt
-13 12 dlv
-4 8 dlv
0 13 dlv
4 8 dlv
13 4 dlv
41 0 dlv
dle
2487 2216 dlt
-8 -4 dlv
-4 -13 dlv
0 -12 dlv
4 -13 dlv
8 -4 dlv
8 4 dlv
4 9 dlv
5 20 dlv
4 9 dlv
8 4 dlv
4 0 dlv
8 -4 dlv
5 -13 dlv
0 -12 dlv
-5 -13 dlv
-8 -4 dlv
dle
2499 2241 dlt
0 49 dlv
-8 0 dlv
-8 -4 dlv
-4 -4 dlv
-4 -8 dlv
0 -13 dlv
4 -8 dlv
8 -8 dlv
12 -4 dlv
9 0 dlv
12 4 dlv
8 8 dlv
5 8 dlv
0 13 dlv
-5 8 dlv
-8 8 dlv
dle
87 0 2446 2319 dls
58 0 2475 2353 dls
2491 2353 dlt
-12 12 dlv
-4 8 dlv
0 13 dlv
4 8 dlv
12 4 dlv
42 0 dlv
dle
2313 2416 dlt
-8 -4 dlv
-5 -13 dlv
0 -12 dlv
5 -13 dlv
8 -4 dlv
8 4 dlv
4 9 dlv
5 21 dlv
4 8 dlv
8 4 dlv
4 0 dlv
8 -4 dlv
5 -13 dlv
0 -12 dlv
-5 -13 dlv
-8 -4 dlv
dle
2325 2441 dlt
0 50 dlv
-8 0 dlv
-8 -5 dlv
-4 -4 dlv
-5 -8 dlv
0 -12 dlv
5 -9 dlv
8 -8 dlv
12 -4 dlv
9 0 dlv
12 4 dlv
8 8 dlv
5 9 dlv
0 12 dlv
-5 8 dlv
-8 9 dlv
dle
88 0 2271 2520 dls
46 0 2118 2434 dls
2128 2434 dlt
-7 -7 dlv
-3 -7 dlv
0 -9 dlv
3 -7 dlv
7 -7 dlv
10 -3 dlv
6 0 dlv
10 3 dlv
7 7 dlv
3 7 dlv
0 9 dlv
-3 7 dlv
-7 7 dlv
dle
70 0 2106 1701 dls
2139 1701 dlt
-6 7 dlv
-4 6 dlv
0 10 dlv
4 7 dlv
6 7 dlv
10 3 dlv
7 0 dlv
10 -3 dlv
6 -7 dlv
4 -7 dlv
0 -10 dlv
-4 -6 dlv
-6 -7 dlv
dle
58 25 4201 1522 dls
4201 1572 dlt
58 -25 dlv
16 -8 dlv
8 -9 dlv
5 -8 dlv
0 -4 dlv
dle
58 0 4201 1597 dls
4217 1597 dlt
-12 12 dlv
-4 8 dlv
0 13 dlv
4 8 dlv
12 4 dlv
42 0 dlv
dle
4053 1781 dlt
-8 -5 dlv
-4 -12 dlv
0 -12 dlv
4 -13 dlv
8 -4 dlv
9 4 dlv
4 8 dlv
4 21 dlv
4 8 dlv
8 5 dlv
5 0 dlv
8 -5 dlv
4 -12 dlv
0 -12 dlv
-4 -13 dlv
-8 -4 dlv
dle
4066 1806 dlt
0 49 dlv
-8 0 dlv
-9 -4 dlv
-4 -4 dlv
-4 -8 dlv
0 -13 dlv
4 -8 dlv
8 -8 dlv
13 -4 dlv
8 0 dlv
13 4 dlv
8 8 dlv
4 8 dlv
0 13 dlv
-4 8 dlv
-8 8 dlv
dle
87 0 4012 1884 dls
58 0 4041 1917 dls
4058 1917 dlt
-13 13 dlv
-4 8 dlv
0 13 dlv
4 8 dlv
13 4 dlv
41 0 dlv
dle
3879 1981 dlt
-8 -4 dlv
-4 -13 dlv
0 -12 dlv
4 -13 dlv
8 -4 dlv
9 4 dlv
4 9 dlv
4 20 dlv
4 9 dlv
8 4 dlv
5 0 dlv
8 -4 dlv
4 -13 dlv
0 -12 dlv
-4 -13 dlv
-8 -4 dlv
dle
3892 2006 dlt
0 49 dlv
-8 0 dlv
-9 -4 dlv
-4 -4 dlv
-4 -8 dlv
0 -13 dlv
4 -8 dlv
8 -8 dlv
13 -4 dlv
8 0 dlv
13 4 dlv
8 8 dlv
4 8 dlv
0 13 dlv
-4 8 dlv
-8 8 dlv
dle
87 0 3838 2084 dls
47 0 3684 1999 dls
3694 1999 dlt
-6 -7 dlv
-4 -7 dlv
0 -10 dlv
4 -6 dlv
6 -7 dlv
10 -3 dlv
7 0 dlv
10 3 dlv
6 7 dlv
4 6 dlv
0 10 dlv
-4 7 dlv
-6 7 dlv
dle
69 0 3673 1266 dls
3706 1266 dlt
-7 7 dlv
-3 6 dlv
0 10 dlv
3 7 dlv
7 6 dlv
10 4 dlv
6 0 dlv
10 -4 dlv
7 -6 dlv
3 -7 dlv
0 -10 dlv
-3 -6 dlv
-7 -7 dlv
dle
1000 0 0 slc
1000 0 0 sfc
1271 1209 dpb
1271 1366 dpv
1366 1366 dpv
1445 1287 dpv
1366 1209 dpv
dps
1184 3124 dpb
1184 3280 dpv
1279 3280 dpv
1358 3202 dpv
1279 3124 dpv
dps
1184 3559 dpb
1184 3716 dpv
1279 3716 dpv
1358 3637 dpv
1279 3559 dpv
dps
1184 3994 dpb
1184 4151 dpv
1279 4151 dpv
1358 4072 dpv
1279 3994 dpv
dps
1184 4429 dpb
1184 4586 dpv
1279 4586 dpv
1358 4507 dpv
1279 4429 dpv
dps
1271 2341 dpb
1271 2497 dpv
1366 2497 dpv
1445 2419 dpv
1366 2341 dpv
dps
1271 1644 dpb
1271 1801 dpv
1366 1801 dpv
1445 1723 dpv
1366 1644 dpv
dps
2280 2906 2350 2976 dbs
2454 2906 2524 2976 dbs
1671 2384 1741 2454 dbs
3063 2036 3133 2106 dbs
1671 1688 1741 1757 dbs
5187 1557 dpb
5187 1714 dpv
5283 1714 dpv
5361 1636 dpv
5283 1557 dpv
dps
3847 2471 3916 2541 dbs
4021 2471 4090 2541 dbs
3237 1949 3307 2019 dbs
4630 1601 4700 1670 dbs
3237 1253 3307 1322 dbs
662 0 5689 4595 clwin
gfs
%%Trailer
%%EOF
