%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6350 600 pap
%%Page: cds 1
gis
rotp
7 1227 6341 3369 clwin
0 1227 6345 3371 clwin
0 1227 6345 3371 clwin
ssls
1000 0 0 slc
1000 0 0 sfc
2839 3065 dlt
16 -58 dlv
17 58 dlv
16 -58 dlv
17 58 dlv
dle
0 -58 2934 3065 dls
2934 3049 dlt
12 12 dlv
8 4 dlv
12 0 dlv
9 -4 dlv
4 -12 dlv
0 -42 dlv
dle
74 0 3078 3057 dls
74 0 3078 3032 dls
2839 3324 dlt
16 -57 dlv
17 57 dlv
16 -57 dlv
17 57 dlv
dle
0 -86 2934 3324 dls
2934 3312 dlt
8 8 dlv
8 4 dlv
12 0 dlv
9 -4 dlv
8 -8 dlv
4 -12 dlv
0 -9 dlv
-4 -12 dlv
-8 -8 dlv
-9 -4 dlv
-12 0 dlv
-8 4 dlv
-8 8 dlv
dle
74 0 3078 3316 dls
74 0 3078 3291 dls
1000 0 0 slc
1000 0 0 sfc
25 0 2035 2670 dls
0 -129 2047 2670 dls
25 0 2035 2541 dls
2127 2670 dlt
-18 -6 dlv
-12 -18 dlv
-7 -31 dlv
0 -19 dlv
7 -31 dlv
12 -18 dlv
18 -6 dlv
13 0 dlv
18 6 dlv
13 18 dlv
6 31 dlv
0 19 dlv
-6 31 dlv
-13 18 dlv
-18 6 dlv
-13 0 dlv
dle
-87 -129 2177 2670 dls
16 0 4564 2705 dls
0 -87 4572 2705 dls
16 0 4564 2618 dls
4650 2705 dlt
-41 0 dlv
-4 -37 dlv
4 4 dlv
12 4 dlv
13 0 dlv
12 -4 dlv
8 -8 dlv
4 -13 dlv
0 -8 dlv
-4 -12 dlv
-8 -9 dlv
-12 -4 dlv
-13 0 dlv
-12 4 dlv
-4 5 dlv
-4 8 dlv
dle
4695 2688 dlt
9 4 dlv
12 13 dlv
0 -87 dlv
dle
24 0 3358 2869 dls
0 -130 3370 2869 dls
24 0 3358 2739 dls
3487 2869 dlt
-62 0 dlv
-6 -55 dlv
6 6 dlv
19 6 dlv
19 0 dlv
18 -6 dlv
12 -13 dlv
7 -18 dlv
0 -13 dlv
-7 -18 dlv
-12 -12 dlv
-18 -7 dlv
-19 0 dlv
-19 7 dlv
-6 6 dlv
-6 12 dlv
dle
3543 2838 dlt
0 6 dlv
6 13 dlv
6 6 dlv
12 6 dlv
25 0 dlv
13 -6 dlv
6 -6 dlv
6 -13 dlv
0 -12 dlv
-6 -12 dlv
-13 -19 dlv
-61 -62 dlv
86 0 dlv
dle
25 0 2035 3362 dls
0 -130 2047 3362 dls
25 0 2035 3232 dls
2109 3337 dlt
12 6 dlv
19 19 dlv
0 -130 dlv
dle
0 800 400 slc
0 800 400 sfc
-302 0 1486 2402 dls
0 432 1486 2186 dls
-372 -216 1858 2402 dls
-372 216 1858 2402 dls
1901 2402 43 dcu
268 0 1953 2402 dls
0 346 4123 2056 dls
-268 0 4391 2056 dls
-303 0 4426 2402 dls
0 432 4426 2186 dls
4443 2056 43 dcu
-372 -216 4798 2402 dls
-372 216 4798 2402 dls
372 -216 4486 2056 dls
372 217 4486 2056 dls
0 433 4858 1840 dls
4841 2402 43 dcu
303 0 4858 2056 dls
268 0 4893 2402 dls
0 -346 5161 2402 dls
-345 0 2826 2402 dls
2826 2402 dlt
173 0 dlv
0 -173 dlv
dle
0 173 2999 2402 dls
0 -432 3172 2143 dls
0 259 3172 2835 dls
3172 2748 86 dcu
346 0 2999 2143 dls
346 0 2999 2662 dls
0 173 3345 2402 dls
519 0 2913 2229 dls
519 0 2913 2575 dls
3518 2402 dlt
-173 0 dlv
0 -173 dlv
dle
346 0 3518 2402 dls
-302 0 1486 3094 dls
0 432 1486 2878 dls
-372 -216 1858 3094 dls
-372 216 1858 3094 dls
1901 3094 43 dcu
268 0 1953 3094 dls
0 800 400 slc
0 800 400 sfc
1721 2290 dlt
6 -6 dlv
6 6 dlv
-6 6 dlv
-6 -6 dlv
dle
0 -87 1727 2247 dls
0 -87 1777 2247 dls
1777 2222 dlt
18 18 dlv
13 7 dlv
18 0 dlv
12 -7 dlv
7 -18 dlv
0 -62 dlv
dle
1882 2247 dlt
37 -87 dlv
37 87 dlv
dle
0 -87 4511 2314 dls
4511 2273 dlt
9 8 dlv
8 4 dlv
12 0 dlv
9 -4 dlv
8 -8 dlv
4 -13 dlv
0 -8 dlv
-4 -12 dlv
-8 -9 dlv
-9 -4 dlv
-12 0 dlv
-8 4 dlv
-9 9 dlv
dle
4586 2314 dlt
4 -4 dlv
4 4 dlv
-4 4 dlv
-4 -4 dlv
dle
0 -58 4590 2285 dls
4627 2314 dlt
0 -70 dlv
4 -13 dlv
8 -4 dlv
8 0 dlv
dle
29 0 4614 2285 dls
4717 2273 dlt
-8 8 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-8 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -12 dlv
8 -9 dlv
8 -4 dlv
13 0 dlv
8 4 dlv
8 9 dlv
dle
4742 2260 dlt
49 0 dlv
0 8 dlv
-4 9 dlv
-4 4 dlv
-8 4 dlv
-12 0 dlv
-9 -4 dlv
-8 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -12 dlv
8 -9 dlv
9 -4 dlv
12 0 dlv
8 4 dlv
8 9 dlv
dle
0 -87 4820 2314 dls
0 -87 4853 2314 dls
3268 1987 dlt
0 -105 dlv
6 -18 dlv
13 -6 dlv
12 0 dlv
dle
44 0 3249 1944 dls
68 -86 3330 1944 dls
-68 -86 3398 1944 dls
99 0 3422 1845 dls
3632 1944 dlt
0 -99 dlv
-6 -18 dlv
-6 -6 dlv
-12 -7 dlv
-19 0 dlv
-12 7 dlv
dle
3632 1926 dlt
-12 12 dlv
-12 6 dlv
-19 0 dlv
-12 -6 dlv
-13 -12 dlv
-6 -19 dlv
0 -12 dlv
6 -19 dlv
13 -12 dlv
12 -6 dlv
19 0 dlv
12 6 dlv
12 12 dlv
dle
0 -86 3750 1944 dls
3750 1926 dlt
-13 12 dlv
-12 6 dlv
-19 0 dlv
-12 -6 dlv
-12 -12 dlv
-6 -19 dlv
0 -12 dlv
6 -19 dlv
12 -12 dlv
12 -6 dlv
19 0 dlv
12 6 dlv
13 12 dlv
dle
3805 1987 dlt
0 -105 dlv
6 -18 dlv
13 -6 dlv
12 0 dlv
dle
43 0 3787 1944 dls
3867 1907 dlt
74 0 dlv
0 12 dlv
-6 13 dlv
-6 6 dlv
-13 6 dlv
-18 0 dlv
-13 -6 dlv
-12 -12 dlv
-6 -19 dlv
0 -12 dlv
6 -19 dlv
12 -12 dlv
13 -6 dlv
18 0 dlv
13 6 dlv
12 12 dlv
dle
1721 2981 dlt
6 -6 dlv
6 6 dlv
-6 7 dlv
-6 -7 dlv
dle
0 -86 1727 2938 dls
0 -86 1777 2938 dls
1777 2914 dlt
18 18 dlv
13 6 dlv
18 0 dlv
12 -6 dlv
7 -18 dlv
0 -62 dlv
dle
1882 2938 dlt
37 -86 dlv
37 86 dlv
dle
224 749 1000 slc
224 749 1000 sfc
2420 0 752 1451 dls
346 0 406 1451 dls
752 1451 43 dcs
0 260 3172 1451 dls
778 0 5161 2402 dls
778 0 406 2402 dls
260 0 2221 2402 dls
259 0 3864 2402 dls
0 1643 752 1451 dls
951 0 2221 3094 dls
432 0 752 3094 dls
1000 0 0 slc
1000 0 0 sfc
81 1455 dlt
49 0 dlv
0 9 dlv
-4 8 dlv
-4 4 dlv
-8 4 dlv
-12 0 dlv
-9 -4 dlv
-8 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -12 dlv
8 -8 dlv
9 -5 dlv
12 0 dlv
8 5 dlv
8 8 dlv
dle
0 -58 159 1480 dls
159 1464 dlt
13 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
5 -12 dlv
0 -42 dlv
dle
0 -86 208 2445 dls
208 2404 dlt
-8 9 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-8 -9 dlv
-4 -12 dlv
0 -8 dlv
4 -13 dlv
8 -8 dlv
8 -4 dlv
13 0 dlv
8 4 dlv
8 8 dlv
dle
0 -86 6130 2431 dls
6130 2419 dlt
-8 8 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-8 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -12 dlv
8 -8 dlv
8 -5 dlv
13 0 dlv
8 5 dlv
8 8 dlv
dle
1318 2420 dlt
33 86 dlv
33 -86 dlv
dle
41 0 1330 2448 dls
1966 2506 dlt
33 -41 dlv
0 -45 dlv
dle
-33 -41 2032 2506 dls
0 -87 4237 2532 dls
4237 2491 dlt
-8 8 dlv
-9 4 dlv
-12 0 dlv
-8 -4 dlv
-8 -8 dlv
-5 -13 dlv
0 -8 dlv
5 -12 dlv
8 -8 dlv
8 -5 dlv
12 0 dlv
9 5 dlv
8 8 dlv
dle
0 -58 4315 2503 dls
4315 2491 dlt
-8 8 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-8 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -12 dlv
8 -8 dlv
8 -5 dlv
13 0 dlv
8 5 dlv
8 8 dlv
dle
4352 2532 dlt
0 -70 dlv
4 -12 dlv
8 -5 dlv
9 0 dlv
dle
29 0 4340 2503 dls
0 -58 4443 2503 dls
4443 2491 dlt
-9 8 dlv
-8 4 dlv
-12 0 dlv
-8 -4 dlv
-9 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -12 dlv
9 -8 dlv
8 -5 dlv
12 0 dlv
8 5 dlv
9 8 dlv
dle
66 0 4463 2437 dls
0 -87 4558 2532 dls
4607 2503 dlt
-8 -4 dlv
-8 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -12 dlv
8 -8 dlv
8 -5 dlv
13 0 dlv
8 5 dlv
8 8 dlv
4 12 dlv
0 8 dlv
-4 13 dlv
-8 8 dlv
-8 4 dlv
-13 0 dlv
dle
0 -87 4756 2530 dls
4756 2489 dlt
-9 8 dlv
-8 4 dlv
-12 0 dlv
-8 -4 dlv
-9 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -12 dlv
9 -8 dlv
8 -5 dlv
12 0 dlv
8 5 dlv
9 8 dlv
dle
0 -58 4834 2501 dls
4834 2489 dlt
-8 8 dlv
-9 4 dlv
-12 0 dlv
-8 -4 dlv
-8 -8 dlv
-5 -13 dlv
0 -8 dlv
5 -12 dlv
8 -8 dlv
8 -5 dlv
12 0 dlv
9 5 dlv
8 8 dlv
dle
4871 2530 dlt
0 -70 dlv
4 -12 dlv
8 -5 dlv
8 0 dlv
dle
29 0 4858 2501 dls
0 -58 4961 2501 dls
4961 2489 dlt
-8 8 dlv
-8 4 dlv
-12 0 dlv
-9 -4 dlv
-8 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -12 dlv
8 -8 dlv
9 -5 dlv
12 0 dlv
8 5 dlv
8 8 dlv
dle
66 0 4982 2435 dls
0 -87 5077 2530 dls
5077 2485 dlt
12 12 dlv
8 4 dlv
13 0 dlv
8 -4 dlv
4 -12 dlv
0 -42 dlv
dle
5151 2530 dlt
4 -4 dlv
4 4 dlv
-4 4 dlv
-4 -4 dlv
dle
0 -58 5155 2501 dls
2983 1993 dlt
-4 8 dlv
-9 8 dlv
-8 4 dlv
-16 0 dlv
-9 -4 dlv
-8 -8 dlv
-4 -8 dlv
-4 -13 dlv
0 -20 dlv
4 -13 dlv
4 -8 dlv
8 -8 dlv
9 -4 dlv
16 0 dlv
8 4 dlv
9 8 dlv
4 8 dlv
0 13 dlv
-21 0 dlv
dle
3012 1927 dlt
0 86 dlv
57 -86 dlv
0 86 dlv
dle
3228 2359 dlt
0 86 dlv
28 0 dlv
13 -4 dlv
8 -8 dlv
4 -8 dlv
4 -12 dlv
0 -21 dlv
-4 -12 dlv
-4 -9 dlv
-8 -8 dlv
-13 -4 dlv
-28 0 dlv
dle
3108 2433 dlt
-8 8 dlv
-12 4 dlv
-17 0 dlv
-12 -4 dlv
-8 -8 dlv
0 -8 dlv
4 -8 dlv
4 -4 dlv
8 -5 dlv
25 -8 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -13 dlv
-8 -8 dlv
-12 -4 dlv
-17 0 dlv
-12 4 dlv
-8 8 dlv
dle
2983 2857 dlt
-4 8 dlv
-9 9 dlv
-8 4 dlv
-16 0 dlv
-9 -4 dlv
-8 -9 dlv
-4 -8 dlv
-4 -12 dlv
0 -21 dlv
4 -12 dlv
4 -8 dlv
8 -9 dlv
9 -4 dlv
16 0 dlv
8 4 dlv
9 9 dlv
4 8 dlv
0 12 dlv
-21 0 dlv
dle
3012 2791 dlt
0 87 dlv
37 0 dlv
12 -4 dlv
4 -5 dlv
4 -8 dlv
0 -12 dlv
-4 -8 dlv
-4 -4 dlv
-12 -5 dlv
-37 0 dlv
dle
1318 3111 dlt
33 87 dlv
33 -87 dlv
dle
41 0 1330 3140 dls
1966 3198 dlt
33 -42 dlv
0 -45 dlv
dle
-33 -42 2032 3198 dls
1000 0 0 slc
1000 0 0 sfc
319 1373 dpb
319 1529 dpv
414 1529 dpv
492 1451 dpv
414 1373 dpv
dps
5852 2324 dpb
5852 2480 dpv
5947 2480 dpv
6025 2402 dpv
5947 2324 dpv
dps
319 2324 dpb
319 2480 dpv
414 2480 dpv
492 2402 dpv
414 2324 dpv
dps
1149 2368 1218 2437 dbs
2187 2368 2256 2437 dbs
4089 2368 4158 2437 dbs
5126 2368 5195 2437 dbs
2446 2368 2515 2437 dbs
3138 1676 3207 1745 dbs
3138 3059 3207 3128 dbs
3829 2368 3898 2437 dbs
1149 3059 1218 3128 dbs
2187 3059 2256 3128 dbs
0 1227 6350 3371 clwin
gfs
%%Trailer
%%EOF
