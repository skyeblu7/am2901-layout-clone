%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6350 600 pap
%%Page: cds 1
gis
rotp
0 655 6344 3941 clwin
0 655 6344 3942 clwin
0 655 6344 3942 clwin
ssls
1000 0 0 slc
1000 0 0 sfc
10 0 3773 2756 dls
0 -55 3778 2756 dls
10 0 3773 2701 dls
3804 2746 dlt
5 2 dlv
8 8 dlv
0 -55 dlv
dle
11 0 5317 2756 dls
0 -55 5322 2756 dls
11 0 5317 2701 dls
5343 2743 dlt
0 3 dlv
3 5 dlv
3 3 dlv
5 2 dlv
10 0 dlv
6 -2 dlv
2 -3 dlv
3 -5 dlv
0 -5 dlv
-3 -6 dlv
-5 -8 dlv
-26 -26 dlv
37 0 dlv
dle
0 11 1588 2982 dls
55 0 1588 2987 dls
0 11 1643 2982 dls
1588 3022 dlt
3 -8 dlv
8 -6 dlv
13 -2 dlv
8 0 dlv
13 2 dlv
8 6 dlv
2 8 dlv
0 5 dlv
-2 8 dlv
-8 5 dlv
-13 3 dlv
-8 0 dlv
-13 -3 dlv
-8 -5 dlv
-3 -8 dlv
0 -5 dlv
dle
55 -37 1588 3043 dls
0 800 400 slc
0 800 400 sfc
221 0 2664 2453 dls
-221 0 3988 2453 dls
221 0 2664 2674 dls
441 882 2885 2343 dbu
220 0 4209 2453 dls
-221 0 5533 2453 dls
220 0 4209 2674 dls
441 883 4429 2343 dbu
0 193 1726 1736 dls
0 220 1837 1736 dls
-221 0 1671 1956 dls
0 248 1947 1736 dls
0 276 2057 1736 dls
221 0 1450 2287 dls
221 0 2057 2453 dls
221 0 1450 2618 dls
221 0 1450 2949 dls
1671 1901 dpb
1671 3060 dpv
2112 2839 dpv
2112 2122 dpv
dpu
0 800 400 slc
0 800 400 sfc
0 -56 3234 2536 dls
0 -37 3284 2517 dls
3284 2509 dlt
-5 6 dlv
-5 2 dlv
-8 0 dlv
-5 -2 dlv
-6 -6 dlv
-2 -8 dlv
0 -5 dlv
2 -8 dlv
6 -5 dlv
5 -3 dlv
8 0 dlv
5 3 dlv
5 5 dlv
dle
3308 2536 dlt
0 -45 dlv
3 -8 dlv
5 -3 dlv
5 0 dlv
dle
18 0 3300 2517 dls
3366 2509 dlt
-5 6 dlv
-6 2 dlv
-8 0 dlv
-5 -2 dlv
-5 -6 dlv
-3 -8 dlv
0 -5 dlv
3 -8 dlv
5 -5 dlv
5 -3 dlv
8 0 dlv
6 3 dlv
5 5 dlv
dle
0 -56 3384 2536 dls
3384 2507 dlt
8 8 dlv
5 2 dlv
8 0 dlv
5 -2 dlv
3 -8 dlv
0 -27 dlv
dle
0 -56 4779 2536 dls
0 -37 4829 2517 dls
4829 2509 dlt
-5 6 dlv
-6 2 dlv
-7 0 dlv
-6 -2 dlv
-5 -6 dlv
-3 -8 dlv
0 -5 dlv
3 -8 dlv
5 -5 dlv
6 -3 dlv
7 0 dlv
6 3 dlv
5 5 dlv
dle
4853 2536 dlt
0 -45 dlv
2 -8 dlv
5 -3 dlv
6 0 dlv
dle
18 0 4845 2517 dls
4910 2509 dlt
-5 6 dlv
-5 2 dlv
-8 0 dlv
-5 -2 dlv
-6 -6 dlv
-2 -8 dlv
0 -5 dlv
2 -8 dlv
6 -5 dlv
5 -3 dlv
8 0 dlv
5 3 dlv
5 5 dlv
dle
0 -56 4929 2536 dls
4929 2507 dlt
8 8 dlv
5 2 dlv
8 0 dlv
5 -2 dlv
3 -8 dlv
0 -27 dlv
dle
224 749 1000 slc
224 749 1000 sfc
0 496 1119 1460 dls
993 0 457 2949 dls
993 0 457 2618 dls
993 0 457 2287 dls
331 0 1119 1956 dls
1324 0 402 1625 dls
0 111 1726 1625 dls
1435 0 402 1350 dls
0 386 1837 1350 dls
1545 0 402 1074 dls
0 662 1947 1074 dls
1655 0 402 798 dls
0 938 2057 798 dls
1931 0 402 3667 dls
0 993 2333 2674 dls
386 0 2278 2453 dls
331 0 2333 2674 dls
3696 0 402 3887 dls
0 1213 4098 2674 dls
221 0 3988 2453 dls
111 0 4098 2674 dls
4579 0 1119 1460 dls
165 0 5533 2453 dls
0 993 5698 1460 dls
5698 2452 28 27 dels
386 0 5698 2453 dls
1000 0 0 slc
1000 0 0 sfc
64 799 dlt
-3 5 dlv
-8 3 dlv
-8 0 dlv
-7 -3 dlv
-3 -5 dlv
3 -5 dlv
5 -3 dlv
13 -2 dlv
5 -3 dlv
3 -5 dlv
0 -3 dlv
-3 -5 dlv
-8 -3 dlv
-8 0 dlv
-7 3 dlv
-3 5 dlv
dle
80 791 dlt
31 0 dlv
0 6 dlv
-2 5 dlv
-3 2 dlv
-5 3 dlv
-8 0 dlv
-5 -3 dlv
-6 -5 dlv
-2 -8 dlv
0 -5 dlv
2 -8 dlv
6 -5 dlv
5 -3 dlv
8 0 dlv
5 3 dlv
5 5 dlv
dle
0 -56 130 826 dls
156 815 dlt
5 3 dlv
8 8 dlv
0 -56 dlv
dle
42 0 187 765 dls
0 -37 248 807 dls
248 797 dlt
8 7 dlv
5 3 dlv
8 0 dlv
5 -3 dlv
3 -7 dlv
0 -27 dlv
dle
163 1075 dlt
-2 5 dlv
-8 3 dlv
-8 0 dlv
-8 -3 dlv
-3 -5 dlv
3 -5 dlv
5 -3 dlv
13 -2 dlv
6 -3 dlv
2 -5 dlv
0 -3 dlv
-2 -5 dlv
-8 -3 dlv
-8 0 dlv
-8 3 dlv
-3 5 dlv
dle
179 1067 dlt
31 0 dlv
0 5 dlv
-2 6 dlv
-3 2 dlv
-5 3 dlv
-8 0 dlv
-5 -3 dlv
-5 -5 dlv
-3 -8 dlv
0 -5 dlv
3 -8 dlv
5 -5 dlv
5 -3 dlv
8 0 dlv
5 3 dlv
5 5 dlv
dle
0 -55 229 1101 dls
255 1091 dlt
5 2 dlv
8 8 dlv
0 -55 dlv
dle
53 1351 dlt
-3 5 dlv
-8 3 dlv
-8 0 dlv
-7 -3 dlv
-3 -5 dlv
3 -5 dlv
5 -3 dlv
13 -3 dlv
5 -2 dlv
3 -5 dlv
0 -3 dlv
-3 -5 dlv
-8 -3 dlv
-8 0 dlv
-7 3 dlv
-3 5 dlv
dle
69 1343 dlt
31 0 dlv
0 5 dlv
-3 6 dlv
-2 2 dlv
-5 3 dlv
-8 0 dlv
-6 -3 dlv
-5 -5 dlv
-2 -8 dlv
0 -5 dlv
2 -8 dlv
5 -5 dlv
6 -3 dlv
8 0 dlv
5 3 dlv
5 5 dlv
dle
0 -55 118 1377 dls
153 1377 dlt
-8 -2 dlv
-5 -8 dlv
-3 -13 dlv
0 -8 dlv
3 -13 dlv
5 -8 dlv
8 -3 dlv
5 0 dlv
8 3 dlv
5 8 dlv
3 13 dlv
0 8 dlv
-3 13 dlv
-5 8 dlv
-8 2 dlv
-5 0 dlv
dle
-37 -55 174 1377 dls
42 0 184 1317 dls
0 -37 245 1359 dls
245 1348 dlt
7 8 dlv
6 3 dlv
8 0 dlv
5 -3 dlv
2 -8 dlv
0 -26 dlv
dle
158 1627 dlt
-3 5 dlv
-8 3 dlv
-8 0 dlv
-8 -3 dlv
-2 -5 dlv
2 -6 dlv
6 -2 dlv
13 -3 dlv
5 -2 dlv
3 -6 dlv
0 -2 dlv
-3 -6 dlv
-8 -2 dlv
-8 0 dlv
-8 2 dlv
-2 6 dlv
dle
173 1619 dlt
32 0 dlv
0 5 dlv
-3 5 dlv
-2 3 dlv
-6 3 dlv
-7 0 dlv
-6 -3 dlv
-5 -5 dlv
-3 -8 dlv
0 -5 dlv
3 -8 dlv
5 -6 dlv
6 -2 dlv
7 0 dlv
6 2 dlv
5 6 dlv
dle
0 -55 223 1653 dls
257 1653 dlt
-7 -3 dlv
-6 -8 dlv
-2 -13 dlv
0 -8 dlv
2 -13 dlv
6 -8 dlv
7 -2 dlv
6 0 dlv
8 2 dlv
5 8 dlv
2 13 dlv
0 8 dlv
-2 13 dlv
-5 8 dlv
-8 3 dlv
-6 0 dlv
dle
-36 -55 278 1653 dls
0 -55 39 2295 dls
39 2287 dlt
-5 6 dlv
-6 2 dlv
-7 0 dlv
-6 -2 dlv
-5 -6 dlv
-3 -7 dlv
0 -6 dlv
3 -8 dlv
5 -5 dlv
6 -3 dlv
7 0 dlv
6 3 dlv
5 5 dlv
dle
42 0 52 2253 dls
0 -37 112 2295 dls
112 2280 dlt
3 7 dlv
5 6 dlv
6 2 dlv
7 0 dlv
dle
144 2314 dlt
3 -3 dlv
2 3 dlv
-2 2 dlv
-3 -2 dlv
dle
0 -37 147 2295 dls
197 2295 dlt
0 -42 dlv
-3 -8 dlv
-3 -2 dlv
-5 -3 dlv
-8 0 dlv
-5 3 dlv
dle
197 2287 dlt
-6 6 dlv
-5 2 dlv
-8 0 dlv
-5 -2 dlv
-5 -6 dlv
-3 -7 dlv
0 -6 dlv
3 -8 dlv
5 -5 dlv
5 -3 dlv
8 0 dlv
5 3 dlv
6 5 dlv
dle
0 -56 218 2314 dls
218 2285 dlt
7 8 dlv
6 2 dlv
8 0 dlv
5 -2 dlv
2 -8 dlv
0 -27 dlv
dle
270 2314 dlt
0 -45 dlv
3 -8 dlv
5 -3 dlv
5 0 dlv
dle
19 0 262 2295 dls
0 -55 6206 2471 dls
6206 2463 dlt
-5 6 dlv
-5 2 dlv
-8 0 dlv
-5 -2 dlv
-6 -6 dlv
-2 -7 dlv
0 -6 dlv
2 -8 dlv
6 -5 dlv
5 -3 dlv
8 0 dlv
5 3 dlv
5 5 dlv
dle
280 2646 dlt
-6 0 dlv
-5 -3 dlv
-3 -8 dlv
0 -44 dlv
dle
18 0 259 2628 dls
0 -56 94 2959 dls
94 2951 dlt
-5 5 dlv
-5 3 dlv
-8 0 dlv
-6 -3 dlv
-5 -5 dlv
-2 -8 dlv
0 -5 dlv
2 -8 dlv
5 -6 dlv
6 -2 dlv
8 0 dlv
5 2 dlv
5 6 dlv
dle
42 0 107 2917 dls
0 -55 168 2977 dls
186 2943 dlt
32 0 dlv
0 5 dlv
-3 5 dlv
-3 3 dlv
-5 3 dlv
-8 0 dlv
-5 -3 dlv
-5 -5 dlv
-3 -8 dlv
0 -5 dlv
3 -8 dlv
5 -6 dlv
5 -2 dlv
8 0 dlv
5 2 dlv
6 6 dlv
dle
252 2977 dlt
-6 0 dlv
-5 -3 dlv
-2 -8 dlv
0 -44 dlv
dle
18 0 231 2959 dls
270 2977 dlt
0 -45 dlv
3 -8 dlv
5 -2 dlv
5 0 dlv
dle
19 0 262 2959 dls
111 3668 dlt
-6 5 dlv
-5 3 dlv
-8 0 dlv
-5 -3 dlv
-5 -5 dlv
-3 -8 dlv
0 -5 dlv
3 -8 dlv
5 -5 dlv
5 -3 dlv
8 0 dlv
5 3 dlv
6 5 dlv
dle
0 -55 129 3694 dls
0 -55 150 3694 dls
-26 -27 176 3676 dls
18 -21 161 3660 dls
42 0 187 3634 dls
0 -37 247 3676 dls
247 3665 dlt
8 8 dlv
5 3 dlv
8 0 dlv
5 -3 dlv
3 -8 dlv
0 -26 dlv
dle
215 3888 dlt
-5 6 dlv
-5 2 dlv
-8 0 dlv
-5 -2 dlv
-5 -6 dlv
-3 -7 dlv
0 -6 dlv
3 -8 dlv
5 -5 dlv
5 -2 dlv
8 0 dlv
5 2 dlv
5 5 dlv
dle
0 -55 234 3915 dls
0 -55 255 3915 dls
-26 -26 281 3896 dls
19 -21 265 3881 dls
0 -55 2957 2480 dls
2957 2454 dlt
-5 5 dlv
-5 3 dlv
-8 0 dlv
-5 -3 dlv
-6 -5 dlv
-2 -8 dlv
0 -5 dlv
2 -8 dlv
6 -5 dlv
5 -3 dlv
8 0 dlv
5 3 dlv
5 5 dlv
dle
2926 2676 dlt
31 0 dlv
0 5 dlv
-2 6 dlv
-3 2 dlv
-5 3 dlv
-8 0 dlv
-5 -3 dlv
-6 -5 dlv
-2 -8 dlv
0 -5 dlv
2 -8 dlv
6 -5 dlv
5 -3 dlv
8 0 dlv
5 3 dlv
5 5 dlv
dle
0 -37 2976 2692 dls
2976 2681 dlt
7 8 dlv
6 3 dlv
8 0 dlv
5 -3 dlv
2 -8 dlv
0 -26 dlv
dle
0 -55 3718 2471 dls
3718 2463 dlt
-5 6 dlv
-5 2 dlv
-8 0 dlv
-5 -2 dlv
-5 -6 dlv
-3 -7 dlv
0 -6 dlv
3 -8 dlv
5 -5 dlv
5 -3 dlv
8 0 dlv
5 3 dlv
5 5 dlv
dle
0 -55 4502 2480 dls
4502 2454 dlt
-5 5 dlv
-6 3 dlv
-8 0 dlv
-5 -3 dlv
-5 -5 dlv
-3 -8 dlv
0 -5 dlv
3 -8 dlv
5 -5 dlv
5 -3 dlv
8 0 dlv
6 3 dlv
5 5 dlv
dle
4470 2676 dlt
32 0 dlv
0 5 dlv
-3 6 dlv
-2 2 dlv
-6 3 dlv
-8 0 dlv
-5 -3 dlv
-5 -5 dlv
-3 -8 dlv
0 -5 dlv
3 -8 dlv
5 -5 dlv
5 -3 dlv
8 0 dlv
6 3 dlv
5 5 dlv
dle
0 -37 4520 2692 dls
4520 2681 dlt
8 8 dlv
5 3 dlv
8 0 dlv
5 -3 dlv
3 -8 dlv
0 -26 dlv
dle
0 -55 5263 2471 dls
5263 2463 dlt
-5 6 dlv
-5 2 dlv
-8 0 dlv
-6 -2 dlv
-5 -6 dlv
-2 -7 dlv
0 -6 dlv
2 -8 dlv
5 -5 dlv
6 -3 dlv
8 0 dlv
5 3 dlv
5 5 dlv
dle
22 0 1621 1941 dls
1626 1941 dlt
-3 -3 dlv
-2 -3 dlv
0 -5 dlv
2 -3 dlv
3 -3 dlv
5 -1 dlv
3 0 dlv
5 1 dlv
3 3 dlv
1 3 dlv
0 5 dlv
-1 3 dlv
-3 3 dlv
dle
1725 1984 dlt
-3 -2 dlv
-1 -4 dlv
0 -5 dlv
1 -5 dlv
3 -1 dlv
4 1 dlv
1 3 dlv
2 8 dlv
1 3 dlv
3 2 dlv
2 0 dlv
3 -2 dlv
2 -4 dlv
0 -5 dlv
-2 -5 dlv
-3 -1 dlv
dle
1730 1993 dlt
0 19 dlv
-3 0 dlv
-3 -1 dlv
-2 -2 dlv
-1 -3 dlv
0 -5 dlv
1 -3 dlv
3 -3 dlv
5 -2 dlv
3 0 dlv
5 2 dlv
3 3 dlv
2 3 dlv
0 5 dlv
-2 3 dlv
-3 3 dlv
dle
33 0 1710 2023 dls
1710 2044 dlt
1 -5 dlv
5 -3 dlv
8 -2 dlv
5 0 dlv
7 2 dlv
5 3 dlv
2 5 dlv
0 3 dlv
-2 5 dlv
-5 3 dlv
-7 1 dlv
-5 0 dlv
-8 -1 dlv
-5 -3 dlv
-1 -5 dlv
0 -3 dlv
dle
33 -22 1710 2056 dls
1946 2039 dlt
-3 -1 dlv
-2 -5 dlv
0 -5 dlv
2 -5 dlv
3 -1 dlv
3 1 dlv
2 4 dlv
1 7 dlv
2 4 dlv
3 1 dlv
2 0 dlv
3 -1 dlv
1 -5 dlv
0 -5 dlv
-1 -5 dlv
-3 -1 dlv
dle
1951 2049 dlt
0 19 dlv
-3 0 dlv
-4 -2 dlv
-1 -2 dlv
-2 -3 dlv
0 -5 dlv
2 -3 dlv
3 -3 dlv
5 -1 dlv
3 0 dlv
5 1 dlv
3 3 dlv
1 3 dlv
0 5 dlv
-1 3 dlv
-3 4 dlv
dle
33 0 1930 2079 dls
1937 2094 dlt
-2 3 dlv
-5 5 dlv
33 0 dlv
dle
1830 2012 dlt
-3 -2 dlv
-2 -5 dlv
0 -4 dlv
2 -5 dlv
3 -2 dlv
3 2 dlv
2 3 dlv
2 8 dlv
1 3 dlv
3 2 dlv
2 0 dlv
3 -2 dlv
2 -5 dlv
0 -4 dlv
-2 -5 dlv
-3 -2 dlv
dle
1835 2021 dlt
0 19 dlv
-3 0 dlv
-3 -2 dlv
-2 -1 dlv
-2 -3 dlv
0 -5 dlv
2 -3 dlv
3 -3 dlv
5 -2 dlv
3 0 dlv
5 2 dlv
3 3 dlv
2 3 dlv
0 5 dlv
-2 3 dlv
-3 3 dlv
dle
34 0 1814 2051 dls
1814 2071 dlt
2 -4 dlv
5 -3 dlv
8 -2 dlv
4 0 dlv
8 2 dlv
5 3 dlv
2 4 dlv
0 4 dlv
-2 4 dlv
-5 3 dlv
-8 2 dlv
-4 0 dlv
-8 -2 dlv
-5 -3 dlv
-2 -4 dlv
0 -4 dlv
dle
34 -22 1814 2084 dls
0 26 1851 2090 dls
23 0 1825 2127 dls
1832 2127 dlt
-5 4 dlv
-2 4 dlv
0 4 dlv
2 3 dlv
5 2 dlv
16 0 dlv
dle
2051 2067 dlt
-3 -2 dlv
-2 -5 dlv
0 -4 dlv
2 -5 dlv
3 -2 dlv
3 2 dlv
2 3 dlv
1 8 dlv
2 3 dlv
3 2 dlv
1 0 dlv
4 -2 dlv
1 -5 dlv
0 -4 dlv
-1 -5 dlv
-4 -2 dlv
dle
2056 2076 dlt
0 19 dlv
-4 0 dlv
-3 -1 dlv
-1 -2 dlv
-2 -3 dlv
0 -5 dlv
2 -3 dlv
3 -3 dlv
5 -2 dlv
3 0 dlv
4 2 dlv
4 3 dlv
1 3 dlv
0 5 dlv
-1 3 dlv
-4 3 dlv
dle
33 0 2035 2106 dls
2041 2122 dlt
-1 3 dlv
-5 5 dlv
33 0 dlv
dle
0 25 2071 2141 dls
22 0 2046 2177 dls
2052 2177 dlt
-4 5 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
4 1 dlv
16 0 dlv
dle
33 0 1610 2255 dls
1626 2255 dlt
-3 3 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
3 3 dlv
5 2 dlv
3 0 dlv
5 -2 dlv
3 -3 dlv
1 -3 dlv
0 -5 dlv
-1 -3 dlv
-3 -3 dlv
dle
22 9 1991 2445 dls
1991 2464 dlt
22 -10 dlv
6 -3 dlv
3 -3 dlv
2 -3 dlv
0 -2 dlv
dle
1621 2587 dlt
-4 -3 dlv
-1 -3 dlv
0 -5 dlv
1 -3 dlv
4 -3 dlv
4 -2 dlv
3 0 dlv
5 2 dlv
3 3 dlv
2 3 dlv
0 5 dlv
-2 3 dlv
-3 3 dlv
dle
33 0 1599 2918 dls
1615 2918 dlt
-3 -3 dlv
-2 -3 dlv
0 -5 dlv
2 -3 dlv
3 -3 dlv
5 -2 dlv
3 0 dlv
5 2 dlv
3 3 dlv
1 3 dlv
0 5 dlv
-1 3 dlv
-3 3 dlv
dle
1000 0 0 slc
1000 0 0 sfc
347 748 dpb
347 848 dpv
408 848 dpv
457 798 dpv
408 748 dpv
dps
347 1024 dpb
347 1123 dpv
408 1123 dpv
457 1074 dpv
408 1024 dpv
dps
347 1300 dpb
347 1399 dpv
408 1399 dpv
457 1350 dpv
408 1300 dpv
dps
347 1576 dpb
347 1675 dpv
408 1675 dpv
457 1625 dpv
408 1576 dpv
dps
347 2238 dpb
347 2337 dpv
408 2337 dpv
457 2287 dpv
408 2238 dpv
dps
6029 2403 dpb
6029 2503 dpv
6090 2503 dpv
6139 2453 dpv
6090 2403 dpv
dps
347 2569 dpb
347 2668 dpv
408 2668 dpv
457 2618 dpv
408 2569 dpv
dps
2642 2431 2686 2475 dbs
2642 2651 2686 2696 dbs
3966 2431 4010 2475 dbs
4187 2431 4231 2475 dbs
4187 2651 4231 2696 dbs
5511 2431 5555 2475 dbs
347 2900 dpb
347 2999 dpv
408 2999 dpv
457 2949 dpv
408 2900 dpv
dps
1925 1714 1969 1758 dbs
2035 1714 2079 1758 dbs
1704 1714 1748 1758 dbs
1814 1714 1859 1758 dbs
1428 1934 1472 1978 dbs
1428 2265 1472 2309 dbs
2256 2431 2300 2475 dbs
1428 2596 1472 2640 dbs
1428 2927 1472 2971 dbs
347 3617 dpb
347 3716 dpv
408 3716 dpv
457 3667 dpv
408 3617 dpv
dps
347 3838 dpb
347 3937 dpv
408 3937 dpv
457 3887 dpv
408 3838 dpv
dps
0 655 6344 3946 clwin
gfs
%%Trailer
%%EOF
