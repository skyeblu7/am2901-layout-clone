%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6350 600 pap
%%Page: cds 1
gis
0 767 4595 5580 clwin
0 767 4597 5580 clwin
0 767 4597 5580 clwin
ssls
1000 0 0 slc
1000 0 0 sfc
0 12 1155 3211 dls
64 0 1155 3217 dls
0 12 1219 3211 dls
1155 3256 dlt
3 -9 dlv
9 -6 dlv
15 -3 dlv
9 0 dlv
16 3 dlv
9 6 dlv
3 9 dlv
0 6 dlv
-3 9 dlv
-9 6 dlv
-16 3 dlv
-9 0 dlv
-15 -3 dlv
-9 -6 dlv
-3 -9 dlv
0 -6 dlv
dle
64 -42 1155 3280 dls
0 12 1155 1496 dls
64 0 1155 1502 dls
0 12 1219 1496 dls
1155 1530 dlt
0 33 dlv
24 -18 dlv
0 9 dlv
3 6 dlv
3 3 dlv
9 3 dlv
6 0 dlv
10 -3 dlv
6 -6 dlv
3 -9 dlv
0 -9 dlv
-3 -9 dlv
-3 -3 dlv
-6 -3 dlv
dle
0 12 2997 2392 dls
63 0 2997 2398 dls
0 12 3060 2392 dls
3009 2428 dlt
-3 6 dlv
-9 9 dlv
63 0 dlv
dle
0 800 400 slc
0 800 400 sfc
0 -223 1441 4310 dls
0 -286 1568 4310 dls
-254 0 1250 3929 dls
-254 0 2012 3675 dls
254 0 996 3421 dls
1250 4183 dpb
1250 3167 dpv
1758 3421 dpv
1758 3929 dpv
dpu
0 -222 1441 2595 dls
0 -286 1568 2595 dls
-254 0 1250 2214 dls
-254 0 2012 1960 dls
254 0 996 1706 dls
1250 2468 dpb
1250 1452 dpv
1758 1706 dpv
1758 2214 dpv
dpu
0 -222 3282 3484 dls
0 -286 3409 3484 dls
-254 0 3092 3103 dls
-254 0 3854 2849 dls
254 0 2838 2595 dls
3092 3357 dpb
3092 2341 dpv
3600 2595 dpv
3600 3103 dpv
dpu
224 749 1000 slc
224 749 1000 sfc
2476 0 933 4564 dls
635 0 361 3929 dls
0 1206 1441 4310 dls
508 0 933 5516 dls
254 0 2012 3675 dls
572 0 2266 3103 dls
0 572 2266 3103 dls
635 0 361 3421 dls
0 889 1568 4310 dls
635 0 933 5199 dls
635 0 361 2214 dls
0 318 1441 2595 dls
254 0 2012 1960 dls
572 0 2266 2595 dls
0 635 2266 1960 dls
635 0 361 1706 dls
0 318 1568 2595 dls
0 1080 3409 3484 dls
2349 0 933 4881 dls
0 1397 3282 3484 dls
381 0 3854 2849 dls
224 749 1000 slc
224 749 1000 sfc
1363 2730 dlt
-6 -3 dlv
-3 -10 dlv
0 -9 dlv
3 -9 dlv
6 -3 dlv
6 3 dlv
3 6 dlv
3 16 dlv
3 6 dlv
6 3 dlv
3 0 dlv
6 -3 dlv
3 -10 dlv
0 -9 dlv
-3 -9 dlv
-6 -3 dlv
dle
1372 2748 dlt
0 36 dlv
-6 0 dlv
-6 -3 dlv
-3 -3 dlv
-3 -6 dlv
0 -9 dlv
3 -6 dlv
6 -6 dlv
9 -3 dlv
6 0 dlv
9 3 dlv
6 6 dlv
3 6 dlv
0 9 dlv
-3 6 dlv
-6 6 dlv
dle
63 0 1333 2805 dls
1333 2844 dlt
3 -9 dlv
9 -6 dlv
15 -3 dlv
9 0 dlv
15 3 dlv
9 6 dlv
3 9 dlv
0 7 dlv
-3 9 dlv
-9 6 dlv
-15 3 dlv
-9 0 dlv
-15 -3 dlv
-9 -6 dlv
-3 -9 dlv
0 -7 dlv
dle
63 -43 1333 2869 dls
1490 2669 dlt
-6 -3 dlv
-3 -9 dlv
0 -9 dlv
3 -9 dlv
6 -3 dlv
6 3 dlv
3 6 dlv
3 15 dlv
3 6 dlv
6 3 dlv
3 0 dlv
6 -3 dlv
3 -9 dlv
0 -9 dlv
-3 -9 dlv
-6 -3 dlv
dle
1499 2687 dlt
0 37 dlv
-6 0 dlv
-6 -3 dlv
-3 -3 dlv
-3 -6 dlv
0 -9 dlv
3 -7 dlv
6 -6 dlv
9 -3 dlv
6 0 dlv
9 3 dlv
6 6 dlv
3 7 dlv
0 9 dlv
-3 6 dlv
-6 6 dlv
dle
63 0 1460 2745 dls
1460 2784 dlt
3 -9 dlv
9 -6 dlv
15 -3 dlv
9 0 dlv
15 3 dlv
9 6 dlv
3 9 dlv
0 6 dlv
-3 9 dlv
-9 6 dlv
-15 3 dlv
-9 0 dlv
-15 -3 dlv
-9 -6 dlv
-3 -9 dlv
0 -6 dlv
dle
63 -42 1460 2808 dls
0 49 1529 2820 dls
42 0 1481 2890 dls
1493 2890 dlt
-9 9 dlv
-3 6 dlv
0 9 dlv
3 6 dlv
9 3 dlv
30 0 dlv
dle
1000 0 0 slc
1000 0 0 sfc
588 5518 dlt
-3 6 dlv
-9 3 dlv
-9 0 dlv
-9 -3 dlv
-3 -6 dlv
3 -7 dlv
6 -3 dlv
15 -3 dlv
6 -3 dlv
3 -6 dlv
0 -3 dlv
-3 -6 dlv
-9 -3 dlv
-9 0 dlv
-9 3 dlv
-3 6 dlv
dle
606 5508 dlt
36 0 dlv
0 6 dlv
-3 7 dlv
-3 3 dlv
-6 3 dlv
-9 0 dlv
-6 -3 dlv
-6 -6 dlv
-3 -10 dlv
0 -6 dlv
3 -9 dlv
6 -6 dlv
6 -3 dlv
9 0 dlv
6 3 dlv
6 6 dlv
dle
0 -64 663 5548 dls
703 5548 dlt
-9 -3 dlv
-6 -9 dlv
-3 -15 dlv
0 -10 dlv
3 -15 dlv
6 -9 dlv
9 -3 dlv
6 0 dlv
9 3 dlv
6 9 dlv
3 15 dlv
0 10 dlv
-3 15 dlv
-6 9 dlv
-9 3 dlv
-6 0 dlv
dle
-42 -64 727 5548 dls
480 4565 dlt
-3 6 dlv
-9 3 dlv
-9 0 dlv
-9 -3 dlv
-3 -6 dlv
3 -6 dlv
6 -3 dlv
15 -3 dlv
6 -3 dlv
3 -6 dlv
0 -3 dlv
-3 -6 dlv
-9 -3 dlv
-9 0 dlv
-9 3 dlv
-3 6 dlv
dle
498 4556 dlt
36 0 dlv
0 6 dlv
-3 6 dlv
-3 3 dlv
-6 3 dlv
-9 0 dlv
-6 -3 dlv
-6 -6 dlv
-3 -9 dlv
0 -6 dlv
3 -9 dlv
6 -6 dlv
6 -3 dlv
9 0 dlv
6 3 dlv
6 6 dlv
dle
0 -63 556 4595 dls
586 4583 dlt
6 3 dlv
9 9 dlv
0 -63 dlv
dle
48 0 622 4526 dls
0 -42 692 4574 dls
692 4562 dlt
9 9 dlv
6 3 dlv
9 0 dlv
6 -3 dlv
3 -9 dlv
0 -30 dlv
dle
594 4883 dlt
-3 6 dlv
-9 3 dlv
-9 0 dlv
-9 -3 dlv
-3 -6 dlv
3 -6 dlv
6 -4 dlv
15 -3 dlv
6 -3 dlv
3 -6 dlv
0 -3 dlv
-3 -6 dlv
-9 -3 dlv
-9 0 dlv
-9 3 dlv
-3 6 dlv
dle
612 4873 dlt
37 0 dlv
0 7 dlv
-3 6 dlv
-3 3 dlv
-6 3 dlv
-9 0 dlv
-7 -3 dlv
-6 -6 dlv
-3 -10 dlv
0 -6 dlv
3 -9 dlv
6 -6 dlv
7 -3 dlv
9 0 dlv
6 3 dlv
6 6 dlv
dle
0 -64 670 4913 dls
700 4901 dlt
6 3 dlv
9 9 dlv
0 -64 dlv
dle
467 5200 dlt
-3 6 dlv
-9 3 dlv
-9 0 dlv
-9 -3 dlv
-3 -6 dlv
3 -6 dlv
6 -3 dlv
15 -3 dlv
6 -3 dlv
3 -6 dlv
0 -3 dlv
-3 -6 dlv
-9 -3 dlv
-9 0 dlv
-9 3 dlv
-3 6 dlv
dle
485 5191 dlt
37 0 dlv
0 6 dlv
-3 6 dlv
-3 3 dlv
-6 3 dlv
-9 0 dlv
-7 -3 dlv
-6 -6 dlv
-3 -9 dlv
0 -6 dlv
3 -9 dlv
6 -6 dlv
7 -3 dlv
9 0 dlv
6 3 dlv
6 6 dlv
dle
0 -63 543 5230 dls
582 5230 dlt
-9 -3 dlv
-6 -9 dlv
-3 -15 dlv
0 -9 dlv
3 -15 dlv
6 -9 dlv
9 -3 dlv
6 0 dlv
9 3 dlv
6 9 dlv
3 15 dlv
0 9 dlv
-3 15 dlv
-6 9 dlv
-9 3 dlv
-6 0 dlv
dle
-42 -63 606 5230 dls
49 0 618 5161 dls
0 -42 688 5209 dls
688 5197 dlt
9 9 dlv
6 3 dlv
9 0 dlv
6 -3 dlv
3 -9 dlv
0 -30 dlv
dle
0 -64 153 1738 dls
153 1708 dlt
-6 6 dlv
-6 3 dlv
-9 0 dlv
-6 -3 dlv
-6 -6 dlv
-3 -9 dlv
0 -6 dlv
3 -9 dlv
6 -6 dlv
6 -4 dlv
9 0 dlv
6 4 dlv
6 6 dlv
dle
153 2226 dlt
-6 6 dlv
-6 3 dlv
-9 0 dlv
-6 -3 dlv
-6 -6 dlv
-3 -9 dlv
0 -6 dlv
3 -9 dlv
6 -6 dlv
6 -3 dlv
9 0 dlv
6 3 dlv
6 6 dlv
dle
0 -63 120 3452 dls
120 3422 dlt
6 6 dlv
6 3 dlv
9 0 dlv
6 -3 dlv
6 -6 dlv
3 -9 dlv
0 -6 dlv
-3 -9 dlv
-6 -6 dlv
-6 -3 dlv
-9 0 dlv
-6 3 dlv
-6 6 dlv
dle
0 -43 153 3950 dls
153 3941 dlt
-6 6 dlv
-6 3 dlv
-9 0 dlv
-6 -3 dlv
-6 -6 dlv
-3 -9 dlv
0 -6 dlv
3 -9 dlv
6 -7 dlv
6 -3 dlv
9 0 dlv
6 3 dlv
6 7 dlv
dle
19 -42 4399 2870 dls
4436 2870 dlt
-18 -42 dlv
-6 -12 dlv
-6 -6 dlv
-7 -3 dlv
-3 0 dlv
dle
42 18 1674 3592 dls
1674 3628 dlt
42 -18 dlv
12 -6 dlv
6 -6 dlv
3 -6 dlv
0 -3 dlv
dle
42 0 1674 3646 dls
1686 3646 dlt
-9 9 dlv
-3 6 dlv
0 9 dlv
3 6 dlv
9 3 dlv
30 0 dlv
dle
1566 3780 dlt
-6 -3 dlv
-3 -9 dlv
0 -9 dlv
3 -9 dlv
6 -3 dlv
6 3 dlv
3 6 dlv
3 15 dlv
3 6 dlv
7 3 dlv
3 0 dlv
6 -3 dlv
3 -9 dlv
0 -9 dlv
-3 -9 dlv
-6 -3 dlv
dle
1575 3799 dlt
0 36 dlv
-6 0 dlv
-6 -3 dlv
-3 -3 dlv
-3 -6 dlv
0 -9 dlv
3 -6 dlv
6 -6 dlv
9 -3 dlv
6 0 dlv
10 3 dlv
6 6 dlv
3 6 dlv
0 9 dlv
-3 6 dlv
-6 6 dlv
dle
64 0 1536 3856 dls
43 0 1557 3880 dls
1569 3880 dlt
-9 9 dlv
-3 6 dlv
0 9 dlv
3 6 dlv
9 3 dlv
31 0 dlv
dle
1439 3926 dlt
-6 -3 dlv
-3 -9 dlv
0 -9 dlv
3 -9 dlv
6 -3 dlv
6 3 dlv
3 6 dlv
3 15 dlv
3 6 dlv
7 3 dlv
3 0 dlv
6 -3 dlv
3 -9 dlv
0 -9 dlv
-3 -9 dlv
-6 -3 dlv
dle
1448 3945 dlt
0 36 dlv
-6 0 dlv
-6 -3 dlv
-3 -3 dlv
-3 -6 dlv
0 -9 dlv
3 -6 dlv
6 -6 dlv
9 -3 dlv
6 0 dlv
10 3 dlv
6 6 dlv
3 6 dlv
0 9 dlv
-3 6 dlv
-6 6 dlv
dle
64 0 1409 4002 dls
34 0 1297 3939 dls
1304 3939 dlt
-5 -4 dlv
-2 -5 dlv
0 -7 dlv
2 -5 dlv
5 -5 dlv
7 -3 dlv
5 0 dlv
8 3 dlv
4 5 dlv
3 5 dlv
0 7 dlv
-3 5 dlv
-4 4 dlv
dle
51 0 1288 3405 dls
1313 3405 dlt
-5 5 dlv
-3 5 dlv
0 7 dlv
3 5 dlv
5 5 dlv
7 2 dlv
5 0 dlv
7 -2 dlv
5 -5 dlv
2 -5 dlv
0 -7 dlv
-2 -5 dlv
-5 -5 dlv
dle
42 19 1674 1877 dls
1674 1914 dlt
42 -18 dlv
12 -7 dlv
6 -6 dlv
3 -6 dlv
0 -3 dlv
dle
42 0 1674 1932 dls
1686 1932 dlt
-9 9 dlv
-3 6 dlv
0 9 dlv
3 6 dlv
9 3 dlv
30 0 dlv
dle
1566 2066 dlt
-6 -3 dlv
-3 -9 dlv
0 -9 dlv
3 -9 dlv
6 -3 dlv
6 3 dlv
3 6 dlv
3 15 dlv
3 6 dlv
7 3 dlv
3 0 dlv
6 -3 dlv
3 -9 dlv
0 -9 dlv
-3 -9 dlv
-6 -3 dlv
dle
1575 2084 dlt
0 36 dlv
-6 0 dlv
-6 -3 dlv
-3 -3 dlv
-3 -6 dlv
0 -9 dlv
3 -6 dlv
6 -6 dlv
9 -3 dlv
6 0 dlv
10 3 dlv
6 6 dlv
3 6 dlv
0 9 dlv
-3 6 dlv
-6 6 dlv
dle
64 0 1536 2142 dls
43 0 1557 2166 dls
1569 2166 dlt
-9 9 dlv
-3 6 dlv
0 9 dlv
3 6 dlv
9 3 dlv
31 0 dlv
dle
1439 2212 dlt
-6 -3 dlv
-3 -9 dlv
0 -9 dlv
3 -9 dlv
6 -3 dlv
6 3 dlv
3 6 dlv
3 15 dlv
3 6 dlv
7 3 dlv
3 0 dlv
6 -3 dlv
3 -9 dlv
0 -9 dlv
-3 -9 dlv
-6 -3 dlv
dle
1448 2230 dlt
0 37 dlv
-6 0 dlv
-6 -4 dlv
-3 -3 dlv
-3 -6 dlv
0 -9 dlv
3 -6 dlv
6 -6 dlv
9 -3 dlv
6 0 dlv
10 3 dlv
6 6 dlv
3 6 dlv
0 9 dlv
-3 6 dlv
-6 7 dlv
dle
64 0 1409 2288 dls
34 0 1297 2225 dls
1304 2225 dlt
-5 -5 dlv
-2 -5 dlv
0 -7 dlv
2 -5 dlv
5 -5 dlv
7 -2 dlv
5 0 dlv
8 2 dlv
4 5 dlv
3 5 dlv
0 7 dlv
-3 5 dlv
-4 5 dlv
dle
51 0 1288 1691 dls
1313 1691 dlt
-5 4 dlv
-3 5 dlv
0 7 dlv
3 5 dlv
5 5 dlv
7 3 dlv
5 0 dlv
7 -3 dlv
5 -5 dlv
2 -5 dlv
0 -7 dlv
-2 -5 dlv
-5 -4 dlv
dle
42 18 3515 2766 dls
3515 2803 dlt
42 -19 dlv
12 -6 dlv
7 -6 dlv
3 -6 dlv
0 -3 dlv
dle
42 0 3515 2821 dls
3527 2821 dlt
-9 9 dlv
-3 6 dlv
0 9 dlv
3 6 dlv
9 3 dlv
30 0 dlv
dle
3408 2955 dlt
-6 -3 dlv
-3 -9 dlv
0 -9 dlv
3 -9 dlv
6 -3 dlv
6 3 dlv
3 6 dlv
3 15 dlv
3 6 dlv
6 3 dlv
3 0 dlv
6 -3 dlv
3 -9 dlv
0 -9 dlv
-3 -9 dlv
-6 -3 dlv
dle
3417 2973 dlt
0 36 dlv
-6 0 dlv
-6 -3 dlv
-3 -3 dlv
-3 -6 dlv
0 -9 dlv
3 -6 dlv
6 -6 dlv
9 -3 dlv
6 0 dlv
9 3 dlv
6 6 dlv
3 6 dlv
0 9 dlv
-3 6 dlv
-6 6 dlv
dle
64 0 3377 3031 dls
42 0 3399 3055 dls
3411 3055 dlt
-9 9 dlv
-3 6 dlv
0 9 dlv
3 6 dlv
9 3 dlv
30 0 dlv
dle
3281 3101 dlt
-6 -3 dlv
-3 -9 dlv
0 -9 dlv
3 -9 dlv
6 -3 dlv
6 3 dlv
3 6 dlv
3 15 dlv
3 6 dlv
6 3 dlv
3 0 dlv
6 -3 dlv
3 -9 dlv
0 -9 dlv
-3 -9 dlv
-6 -3 dlv
dle
3290 3119 dlt
0 36 dlv
-6 0 dlv
-6 -3 dlv
-3 -3 dlv
-3 -6 dlv
0 -9 dlv
3 -6 dlv
6 -6 dlv
9 -3 dlv
6 0 dlv
9 3 dlv
6 6 dlv
3 6 dlv
0 9 dlv
-3 6 dlv
-6 6 dlv
dle
64 0 3250 3177 dls
34 0 3138 3114 dls
3146 3114 dlt
-5 -5 dlv
-3 -5 dlv
0 -7 dlv
3 -5 dlv
5 -5 dlv
7 -2 dlv
5 0 dlv
7 2 dlv
5 5 dlv
2 5 dlv
0 7 dlv
-2 5 dlv
-5 5 dlv
dle
51 0 3130 2579 dls
3154 2579 dlt
-5 5 dlv
-2 5 dlv
0 7 dlv
2 5 dlv
5 5 dlv
7 2 dlv
5 0 dlv
7 -2 dlv
5 -5 dlv
3 -5 dlv
0 -7 dlv
-3 -5 dlv
-5 -5 dlv
dle
1000 0 0 slc
1000 0 0 sfc
806 5459 dpb
806 5573 dpv
876 5573 dpv
933 5516 dpv
876 5459 dpv
dps
1415 4284 1466 4335 dbs
1542 4284 1593 4335 dbs
971 3903 1022 3954 dbs
1987 3649 2038 3700 dbs
971 3395 1022 3446 dbs
1415 2570 1466 2621 dbs
1542 2570 1593 2621 dbs
971 2189 1022 2240 dbs
1987 1935 2038 1986 dbs
971 1681 1022 1732 dbs
806 4506 dpb
806 4621 dpv
876 4621 dpv
933 4564 dpv
876 4506 dpv
dps
806 4824 dpb
806 4938 dpv
876 4938 dpv
933 4881 dpv
876 4824 dpv
dps
806 5141 dpb
806 5256 dpv
876 5256 dpv
933 5199 dpv
876 5141 dpv
dps
234 1649 dpb
234 1763 dpv
304 1763 dpv
361 1706 dpv
304 1649 dpv
dps
234 2157 dpb
234 2271 dpv
304 2271 dpv
361 2214 dpv
304 2157 dpv
dps
4235 2792 dpb
4235 2906 dpv
4305 2906 dpv
4362 2849 dpv
4305 2792 dpv
dps
234 3363 dpb
234 3478 dpv
304 3478 dpv
361 3421 dpv
304 3363 dpv
dps
3257 3459 3308 3510 dbs
3384 3459 3435 3510 dbs
2812 3078 2863 3129 dbs
3828 2824 3879 2875 dbs
2812 2570 2863 2621 dbs
234 3871 dpb
234 3986 dpv
304 3986 dpv
361 3929 dpv
304 3871 dpv
dps
0 767 4600 5580 clwin
gfs
%%Trailer
%%EOF
